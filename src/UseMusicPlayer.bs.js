// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as MusicPlayer$ReasonMusicPlayer from "./MusicPlayer.bs.js";

function useMusicPlayer(param) {
  var match = React.useContext(MusicPlayer$ReasonMusicPlayer.musicPlayerContext);
  var dispatch = match[1];
  var state = match[0];
  var playing = state[/* playing */1];
  var trackList = state[/* tracks */0];
  var currentTrackName;
  if (playing) {
    var match$1 = playing[0];
    currentTrackName = match$1 !== undefined ? Caml_array.caml_array_get(state[/* tracks */0], match$1)[/* name */0] : "Please choose a track to play";
  } else {
    currentTrackName = "Please choose a track to play";
  }
  var togglePlay = function (param) {
    return Curry._1(dispatch, /* TogglePlay */0);
  };
  var playTrack = function (index) {
    if (playing) {
      var match = playing[0];
      if (match !== undefined) {
        var match$1 = index === match;
        if (match$1) {
          return Curry._1(dispatch, /* TogglePlay */0);
        } else {
          return Curry._1(dispatch, /* PlayTrack */[index]);
        }
      } else {
        return Curry._1(dispatch, /* PlayTrack */[index]);
      }
    } else {
      return Curry._1(dispatch, /* PlayTrack */[index]);
    }
  };
  var playPreviousTrack = function (param) {
    Curry._1(dispatch, /* TogglePlay */0);
    if (playing) {
      var match = playing[0];
      if (match !== undefined) {
        var idx = match;
        var match$1 = idx === 0;
        if (match$1) {
          return playTrack(idx);
        } else {
          return playTrack(idx - 1 | 0);
        }
      } else {
        return /* () */0;
      }
    } else {
      return /* () */0;
    }
  };
  var playNextTrack = function (param) {
    var trackListEnd = trackList.length - 1 | 0;
    Curry._1(dispatch, /* TogglePlay */0);
    if (playing) {
      var match = playing[0];
      if (match !== undefined) {
        var idx = match;
        var match$1 = idx === trackListEnd;
        if (match$1) {
          return playTrack(idx);
        } else {
          return playTrack(idx + 1 | 0);
        }
      } else {
        return /* () */0;
      }
    } else {
      return /* () */0;
    }
  };
  return /* tuple */[
          playing,
          trackList,
          currentTrackName,
          togglePlay,
          playTrack,
          playPreviousTrack,
          playNextTrack
        ];
}

export {
  useMusicPlayer ,
  
}
/* react Not a pure module */
